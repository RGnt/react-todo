{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","className","type","placeholder","onChange","target","Todo","todo","index","toggleTodo","deleteTodo","isCompleted","onClick","text","App","todos","setTodos","newTodos","splice","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";iPA6DA,SAASA,EAAT,GAA6B,IAAVC,EAAS,EAATA,QAAS,EACAC,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,KAU1B,OACE,uBAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACEJ,IACJF,EAAQE,GACRC,EAAS,MAIT,UACE,uBAAOI,UAAU,QAAQC,KAAK,OAAON,MAAOA,EAAOO,YAAY,gCAAgCC,SAAU,SAAAL,GAAC,OAAIF,EAASE,EAAEM,OAAOT,UAChI,uBAAOM,KAAK,SAASN,MAAM,cAAcK,UAAU,WAOzD,SAASK,EAAT,GAAsD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WACtC,OACC,sBAAKT,UAAS,eAAUM,EAAKI,aAAe,gBAA5C,UACA,qBAAKC,QAAS,kBAAMH,EAAWD,IAA/B,SACID,EAAKM,OAER,8BACE,wBAAQZ,UAAU,aAAaW,QAAS,kBAAMF,EAAWF,IAAzD,oBAMSM,MAnFf,WAAgB,IAAD,EACanB,mBAAS,CACjC,CACEkB,KAAM,yBACNF,aAAa,GAEf,CACEE,KAAM,qCACNF,aAAa,GAEf,CACEE,KAAM,cACNF,aAAa,KAZJ,mBACNI,EADM,KACCC,EADD,KAqBTP,EAAa,SAAAD,GAClB,IAAMS,EAAQ,YAAOF,GACrBE,EAAST,GAAOG,aAAeM,EAAST,GAAOG,YAC/CK,EAASC,IAGJP,EAAa,SAAAF,GACjB,IAAMS,EAAQ,YAAOF,GACrBE,EAASC,OAAOV,EAAO,GACvBQ,EAASC,IAGR,OACC,sBAAKhB,UAAU,MAAf,UACC,cAACR,EAAD,CAAUC,QAnBC,SAAAmB,GACd,IAAMI,EAAQ,sBAAOF,GAAP,CAAa,CAACF,UAC5BG,EAASC,MAkBN,qBAAKhB,UAAU,YAAf,SACCc,EAAMI,KAAI,SAACZ,EAAMC,GAAP,OACT,cAACF,EAAD,CACME,MAAOA,EACPD,KAAMA,EACNE,WAAcA,EACdC,WAAcA,GAJTF,YCrCHY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.69a1e465.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n/*\n? CRUD => Creating to-do items, \n?         Reading to-do items, \n?         Updating to-do items, \n?         Deleting to-do items.\n*/\n\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    {\n      text: 'Learn React faster !!!',\n      isCompleted: false,\n    },\n    {\n      text: \"Finish the projects you've started\",\n      isCompleted: false,\n    },  \n    {\n      text: 'Read a book',\n      isCompleted: false,\n    },  \n  ]);\n\nconst addTodo = text => {\n  const newTodos = [...todos,{text}];\n  setTodos(newTodos);\n}\n\nconst toggleTodo = index =>{\n const newTodos = [...todos];\n newTodos[index].isCompleted = !newTodos[index].isCompleted; \n setTodos(newTodos) ;\n}\n\nconst deleteTodo = index => {\n  const newTodos = [...todos];\n  newTodos.splice(index, 1); //! splice() => remove 1 element from todo index\n  setTodos(newTodos);\n}\n  \n   return (\n    <div className=\"App\">      \n     <TodoForm addTodo={addTodo}/>\n     <div className='todo-list'>\n     {todos.map((todo, index) => (\n       <Todo key={index} \n             index={index} \n             todo={todo}             \n             toggleTodo = {toggleTodo}\n             deleteTodo = {deleteTodo}\n             />       \n     ))}     \n     </div>\n    </div>\n  ); \n}\n\nfunction TodoForm({addTodo}){\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(!value) return;\n    addTodo(value);\n    setValue('');\n  }\n\n  return(\n    <form onSubmit = {handleSubmit}>\n      <input className='input' type='text' value={value} placeholder='create your own to do list...' onChange={e => setValue(e.target.value)}/>      \n      <input type=\"submit\" value=\"Add To List\" className='btn'/>  \n    </form>   \n  )\n}\n\n\n// * add the is-completed css class to todo text\nfunction Todo({todo, index, toggleTodo, deleteTodo }){\n  return(\n   <div className={`todo ${todo.isCompleted && 'is-completed'}`} >          \n   <div onClick={() => toggleTodo(index)}>\n      {todo.text}\n   </div>\n    <div>      \n      <button className='delete-btn' onClick={() => deleteTodo(index)}>X</button>\n    </div>  \n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}